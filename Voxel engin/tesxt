import pygame
import math

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("3D Rendering Engine")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Cube vertices
vertices = [
    (-1, -1, -1),
    (1, -1, -1),
    (1, 1, -1),
    (-1, 1, -1),
    (-1, -1, 1),
    (1, -1, 1),
    (1, 1, 1),
    (-1, 1, 1)
]

# Cube edges
edges = [
    (0, 1), (1, 2), (2, 3), (3, 0),
    (4, 5), (5, 6), (6, 7), (7, 4),
    (0, 4), (1, 5), (2, 6), (3, 7)
]

def project(x, y, z, scale, distance):
    factor = scale / (distance + z)
    x = x * factor + WIDTH // 2
    y = -y * factor + HEIGHT // 2
    return int(x), int(y)

def main():
    clock = pygame.time.Clock()
    angle_x = 0
    angle_y = 0
    move_x = 0
    move_y = 0
    move_z = 0
    distance = 4
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
                if event.key == pygame.K_LEFT:
                    move_y = -0.1
                if event.key == pygame.K_RIGHT:
                    move_y = 0.1
                if event.key == pygame.K_UP:
                    move_x = 0.1
                if event.key == pygame.K_DOWN:
                    move_x = -0.1
                if event.key == pygame.K_w:
                    move_z = -0.1
                if event.key == pygame.K_s:
                    move_z = 0.1
            if event.type == pygame.KEYUP:
                if event.key in (pygame.K_LEFT, pygame.K_RIGHT):
                    move_y = 0
                if event.key in (pygame.K_UP, pygame.K_DOWN):
                    move_x = 0
                if event.key in (pygame.K_w, pygame.K_s):
                    move_z = 0
        screen.fill(BLACK)

        # Rotate cube
        angle_x += move_x
        angle_y += move_y
        distance += move_z
        cos_angle_x = math.cos(angle_x)
        sin_angle_x = math.sin(angle_x)
        cos_angle_y = math.cos(angle_y)
        sin_angle_y = math.sin(angle_y)

        transformed_vertices = []
        for x, y, z in vertices:
            # Rotate around x-axis
            y, z = y * cos_angle_x - z * sin_angle_x, z * cos_angle_x + y * sin_angle_x
            # Rotate around y-axis
            x, z = x * cos_angle_y - z * sin_angle_y, z * cos_angle_y + x * sin_angle_y
            transformed_vertices.append((x, y, z))

        # Draw edges
        for edge in edges:
            points = []
            for vertex in edge:
                x, y, z = transformed_vertices[vertex]
                points.append(project(x, y, z, 400, distance))
            pygame.draw.line(screen, WHITE, points[0], points[1], 1)

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main()
