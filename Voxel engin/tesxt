import pygame
import math

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("3D Rendering Engine")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

cube = True
if cube:
    # Cube vertices
    # (x, y, z)
    vertices = [
        (-1, -1, -1),
        (1, -1, -1),
        (1, 1, -1),
        (-1, 1, -1),
        (-1, -1, 1),
        (1, -1, 1),
        (1, 1, 1),
        (-1, 1, 1)
    ]

    # Cube edges
    # (start_vertex, end_vertex)
    edges = [
        (0, 1), (1, 2), (2, 3), (3, 0),
        (4, 5), (5, 6), (6, 7), (7, 4),
        (0, 4), (1, 5), (2, 6), (3, 7)
    ]
else:
    # Shape vertices
    # (x, y, z)
    vertices = [
        (1, 1, -1),
        (3, 1, 1),
        (-1, 1, 1),
        (1, 1, 3),
        (1, 3, 1),
        (1, -1, 1)
    ]

    # Shape edges
    # (start_vertex, end_vertex)
    edges = [
        (0,1), (1,3), (3,2), (2,0),
        (0,4), (1,4), (3,4), (2,4),
        (0,5), (1,5), (3,5), (2,5)
    ]
def project(x, y, z, scale, distance):
    factor = scale / (distance + z)
    x = x * factor + WIDTH // 2
    y = -y * factor + HEIGHT // 2
    return int(x), int(y)

def main():
    clock = pygame.time.Clock()
    angle_x = 0
    angle_y = 0
    angle_z = 0
    pos_x = 0
    pos_y = 0
    pos_z = 0
    distance = 4
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            angle_y -= 0.1
        if keys[pygame.K_RIGHT]:
            angle_y += 0.1
        if keys[pygame.K_UP]:
            angle_x -= 0.1
        if keys[pygame.K_DOWN]:
            angle_x += 0.1
        if keys[pygame.K_e]:
            angle_z -= 0.1
        if keys[pygame.K_q]:
            angle_z += 0.1
        if keys[pygame.K_s]:
            pos_z -= 0.1
        if keys[pygame.K_w]:
            pos_z += 0.1
        if keys[pygame.K_a]:
            pos_x -= 0.1
        if keys[pygame.K_d]:
            pos_x += 0.1
        if keys[pygame.K_SPACE]:
            pos_y += 0.1
        if keys[pygame.K_c]:
            pos_y -= 0.1

        screen.fill(BLACK)

        # Rotate cube
        cos_angle_x = math.cos(angle_x)
        sin_angle_x = math.sin(angle_x)
        cos_angle_y = math.cos(angle_y)
        sin_angle_y = math.sin(angle_y)
        cos_angle_z = math.cos(angle_z)
        sin_angle_z = math.sin(angle_z)

        transformed_vertices = []
        for x, y, z in vertices:
            # Rotate around x-axis
            y, z = y * cos_angle_x - z * sin_angle_x, z * cos_angle_x + y * sin_angle_x
            # Rotate around y-axis
            x, z = x * cos_angle_y - z * sin_angle_y, z * cos_angle_y + x * sin_angle_y
            # Rotate around z-axis
            x, y = x * cos_angle_z - y * sin_angle_z, y * cos_angle_z + x * sin_angle_z
            # Translate
            x += pos_x
            y += pos_y
            z += pos_z
            transformed_vertices.append((x, y, z))

        # Draw edges
        for edge in edges:
            points = []
            for vertex in edge:
                x, y, z = transformed_vertices[vertex]
                points.append(project(x, y, z, 400, distance))
            pygame.draw.line(screen, WHITE, points[0], points[1], 1)

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main()
